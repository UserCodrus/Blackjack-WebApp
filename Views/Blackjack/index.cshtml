<div class="container-fluid">
    <!-- Scripts for playing the game -->
    <script type="text/javascript">
        // Win and loss counter
        var wins = 0;
        var losses = 0;
        var pstand = false;
        var dstand = false;
        var gameover = false;

        // Card arrays
        var card_dealer = [];
        var card_player = [];

        // Gets an http request from the blackjack api
        function apiCall(callback)
        {
            // The JSON object returned by our request
            var result;

            // Create a request
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function()
            {
                if (xhttp.readyState == 4 && xhttp.status == 200)
                {
                    // Process the request and the display the cards
                    //card_player.push(JSON.parse(xhttp.responseText));
                    //showCards();
                    callback(xhttp.responseText);
                }
            };

            // Send an http request
            xhttp.open("GET", "/api", true);
            xhttp.send();
        }

        // Sets the wins and losses display
        function showScore()
        {
            document.getElementById("win").innerHTML = "Wins: " + wins;
            document.getElementById("lose").innerHTML = "Losses: " + losses;
        }

        // Functions to set cards based on json inputs
        function playerCard(text)
        {
            card_player.push(JSON.parse(text));
            showCards();
            var score = total(card_player);
            document.getElementById("playertext").innerHTML = "Player (" + score + ")";
            checkWinner();
        }

        function dealerCard(text)
        {
            card_dealer.push(JSON.parse(text));
            showCards();
            var score = total(card_dealer);
            document.getElementById("dealertext").innerHTML = "Dealer (" + score + ")";
            checkWinner();
        }

        // Get the total for a player's hand
        function total(array)
        {
            var score = 0;
            var aces = 0;

            // Get the base score value
            for (i = 0; i < array.length; i++)
            {
                score += array[i].value;
                if (array[i].face == "A")
                {
                    aces += 1;
                }
            }

            // Raise the value of aces if applicable
            while (aces > 0)
            {
                if (score < 13)
                {
                    score += 9;
                    aces--;
                }
                else
                {
                    aces = 0;
                }
            }

            return score;
        }

        // Displays each player's cards
        function showCards()
        {
            for (i = 0; i < 11; i++)
            {
                // Show the player's card
                if (i < card_player.length)
                {
                    document.getElementById("player"+i).src = card_player[i].image;
                }
                else
                {
                    document.getElementById("player"+i).src = "";
                }

                // Show the dealer's card
                if (i < card_dealer.length)
                {
                    document.getElementById("dealer"+i).src = card_dealer[i].image;
                }
                else
                {
                    document.getElementById("dealer"+i).src = "";
                }
            }
        }

        // Empty arrays and draw cards at the start of the game
        function newGame()
        {
            gameover = false;

            // Reset arrays and standing flags
            card_player = [];
            card_dealer = [];

            pstand = false;
            dstand = false;

            // Draw two cards for each player
            apiCall(playerCard);
            apiCall(dealerCard);
            apiCall(playerCard);
            apiCall(dealerCard);

            // Reset the game over text
            document.getElementById("footer").innerHTML = "";
        }

        // Update the score and start a new game
        function endGame(state)
        {
            if (state == 1)
            {
                // Player wins
                wins += 1;
                document.getElementById("footer").innerHTML = "Player Wins! Press hit or stand to restart.";
            }
            else if (state == 0)
            {
                // Dealer wins
                losses += 1;
                document.getElementById("footer").innerHTML = "Dealer Wins! Press hit or stand to restart.";
            }
            else
            {
                // Game is a draw
                document.getElementById("footer").innerHTML = "Draw! Press hit or stand to restart.";
            }

            // Display the score and start a new game
            showScore();
            showCards();
            gameover = true;
        }

        // Check for a winner and end the game if anyone wins
        function checkWinner()
        {
            if (gameover == true)
            {
                return;
            }

            // Calculate scores
            var pscore = total(card_player);
            var dscore = total(card_dealer);

            // End if a player busts
            if (pscore > 21 && dscore > 21)
            {
                endGame(2);
                return true;
            }
            if (pscore > 21)
            {
                endGame(0);
                return true;
            }
            if (dscore > 21)
            {
                endGame(1);
                return true;
            }

            // Both players are standing
            if (pstand == true && dstand == true)
            {
                if (pscore > dscore)
                {
                    endGame(1);
                    return true;
                }
                else if (dscore > pscore)
                {
                    endGame(0);
                    return true;
                }
                else
                {
                    endGame(2);
                    return true;
                }
            }

            // Player is standing and dealer has a higher score
            if (pstand == true && dscore > pscore)
            {
                endGame(0);
                return true;
            }

            // Dealer is standing and player has a higher score
            if (dstand == true && pscore > dscore)
            {
                endGame(1);
                return true;
            }

            // Nobody won yet
            return false;
        }

        // The dealer's AI routine
        function dealerPlay()
        {
            // Skip a turn if the dealer is standing
            if (dstand == true)
            {
                checkWinner();
                return;
            }

            var score = total(card_dealer);
            var pscore = total(card_player);

            // Stand if the dealer hits 21
            if (score > 18)
            {
                dstand = true;
                checkWinner();
                return;
            }

            // Stand if the player is standing and we have a higher score
            if (pstand == true && score > pscore)
            {
                dstand = true;
                checkWinner();
                return;
            }

            // Draw a card if the player is standing and score is less than the player
            if (pstand == true && score < pscore)
            {
                apiCall(dealerCard);
                return;
            }

            // If the dealer's score is less than 16, draw a card
            if (pstand == false && score <= pscore)
            {
                apiCall(dealerCard);
                return;
            }

            // Draw if the dealer has a low hand
            if (score < 17)
            {
                apiCall(dealerCard);
                return;
            }

            // Stand if none of the above is applicable
            dstand = true;
            checkWinner();
            return;
        }

        // Script for the hit button
        function hitButton()
        {
            if (gameover == true)
            {
                newGame();
                return;
            }

            if (pstand == false)
            {
                apiCall(playerCard);
            }
            dealerPlay();
        }

        // Script for the stand button
        function standButton()
        {
            if (gameover == true)
            {
                newGame();
                return;
            }

            pstand = true;
            dealerPlay();
        }

        // Start a new game when the page loads
        newGame();
    </script>

    <!-- Dealer hand NOTE: UI must support up to 11 cards-->
    <div class="row">
        <div class="col align-self-start text-left">
            <img id="dealer0" src="">
            <img id="dealer1" src="">
            <img id="dealer2" src="">
            <img id="dealer3" src="">
            <img id="dealer4" src="">
            <img id="dealer5" src="">
            <img id="dealer6" src="">
            <img id="dealer7" src="">
            <img id="dealer8" src="">
            <img id="dealer9" src="">
            <img id="dealer10" src="">
            <strong id="dealertext">Dealer</strong>
        </div>
    </div>

    <!-- Buttons -->
    <div class="row" style="padding: 15;">
        <div class="col">
            <!-- empty -->
        </div>
        <div class="col text-center">
            <button onclick="hitButton()">Hit</button><button onclick="standButton()">Stand</button>
        </div>
        <div class="col">
            <!-- empty -->
        </div>
    </div>

    <!-- Player hand -->
    <div class="row">
        <div class="col align-self-end text-right">
            <strong id="playertext">Player</strong>
            <img id="player10" src="">
            <img id="player9" src="">
            <img id="player8" src="">
            <img id="player7" src="">
            <img id="player6" src="">
            <img id="player5" src="">
            <img id="player4" src="">
            <img id="player3" src="">
            <img id="player2" src="">
            <img id="player1" src="">
            <img id="player0" src="">
        </div>
    </div>

    <!-- Score -->
    <div class="row" style="padding: 10;">
        <div class="col">
            <!-- empty -->
        </div>
        <div id="win" class="col text-center border">
            Wins: 0
        </div>
        <div id="lose" class="col text-center border">
            Losses: 0
        </div>
        <div class="col">
            <!-- empty -->
        </div>
    </div>

    <!-- Win/ loss messages -->
    <div class="row">
        <div class="col text-center">
            <h1 id="footer"></h1>
        </div>
    </div>
</div>